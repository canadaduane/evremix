#!/usr/bin/env ruby
require 'optparse'

def blank_variants(words)
  inside = words[1..-2]
  (0..(2**inside.size-1)).map do |i|
    seq = i.to_s(2).rjust(inside.size, '0').split('').
      each_with_index.map{ |b, j| b == '0' ? '_' : inside[j] }
    [words[0]] + seq + [words[-1]]
  end
end

def mkngrams(input, output, n, blanks = false)
  words = []
  input.each_line do |line|
    line.gsub!(/[^a-zA-Z\s\-]+/, '')
    next if line =~ /^\s*$/
    line.gsub!(/^\s+/, '')
    words += line.downcase.split(/[\s\-]+/m)
    while words.size >= n
      if blanks and n > 2
        blank_variants(words[0...n]).each do |seq|
          output.write seq.join(" ") + "\n"
        end
      else
        output.write words[0...n].join(" ") + "\n"
      end
      words.shift
    end
  end
end

options = {:n => 1, :output => $stdout}
OptionParser.new do |opts|
  opts.banner = "Usage: mkngrams.rb [options] [file.txt]"

  opts.on("-n", "--ngram N", "Specify number of ngrams") do |n|
    options[:n] = Integer(n)
  end
  opts.on("-o", "--output FILENAME", "Send output to filename") do |filename|
    options[:output] = File.open(filename, "w")
  end
  opts.on("-b", "--[no-]blanks", "Generate blanks in ngrams") do |blanks|
    options[:blanks] = blanks
  end
end.parse!

if ARGV.size > 0
# Use files as input
  ARGV.each do |filename|
    File.open(filename) do |file|
      mkngrams(file, options[:output], options[:n], options[:blanks])
    end
  end
else
# Use stdin as input
  mkngrams($stdin, options[:output], options[:n], options[:blanks])
end
